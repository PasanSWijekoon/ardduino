#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_NeoPixel.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <vector>  // For dynamic arrays

#define LED_PIN    13   // GPIO pin for the LED strip data
#define LED_COUNT  14   // Total number of LEDs in the strip
#define PIR_PIN    25   // GPIO pin for PIR motion sensor

// Define GPIO pins for each push button
const int buttonPins[LED_COUNT] = {4, 5, 12, 16, 17, 18, 19, 23, 35, 33, 26, 14, 27};

// Variables for the song data
std::vector<int> noteToLED;      // Store the notes from server dynamically
std::vector<int> noteDurations;  // Store the note durations from server dynamically
String songName;
String mode;
int numNotes = 0;  // Number of notes will be dynamically set

int correctPresses = 0; // Track correct presses
int totalPresses = 0;   // Total required presses

// Wi-Fi credentials
// Wi-Fi credentials
const char* ssid = "Wokwi-GUEST";
const char* password = "";
const char* serverUrl = "https://mypiono.sysoftgroups.com/save_performance.php"; // Replace with your PHP URL


// Initialize LCD and LED strip
LiquidCrystal_I2C lcd(0x27, 16, 2);
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

// Function to display the selected song name and mode to the user
void promptUser() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Song: " + songName);
  lcd.setCursor(0, 1);
  lcd.print("Mode: " + mode);
  delay(2000);  // Wait for user to read the message
}

void setup() {
  Serial.begin(115200);   // Initialize serial communication
  lcd.init();             // Initialize the LCD
  lcd.backlight();        // Turn on LCD backlight
  strip.begin();          // Initialize the LED strip
  strip.show();           // Turn off all pixels

  connectToWiFi();        // Connect to Wi-Fi
  fetchSongData();        // Fetch song data from the server
  promptUser();            // Show the song name and mode on the LCD
  delay(2000);            // Pause for user to read the message

  // Initialize PIR sensor
  pinMode(PIR_PIN, INPUT);

  // Initialize all button pins as inputs with pull-down resistors
  for (int i = 0; i < LED_COUNT; i++) {
    pinMode(buttonPins[i], INPUT_PULLDOWN);
  }

  // Display starting message
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("System Initialized");
  lcd.setCursor(0, 1);
  lcd.print("Move to Start");
  delay(2000); // Display message for 2 seconds
}

void loop() {
  // Check PIR motion sensor
  if (digitalRead(PIR_PIN) == HIGH) { // Motion detected
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Press Btn To Start");
    lcd.setCursor(0, 1);
    lcd.print("Song Sequence");

    // Wait for any button press to start the song sequence
    while (true) {
      bool startSong = false;
      for (int i = 0; i < LED_COUNT; i++) {
        if (digitalRead(buttonPins[i]) == HIGH) {
          startSong = true;
          break;
        }
      }
      if (startSong) break;
      delay(100); // Small delay to prevent rapid loop execution
    }

    // Play the song
    if (mode == "tutorial") {
      playTutorialMode();
    } else if (mode == "play") {
      playPlayMode();
    }

    printPerformanceOverview(); // Print performance after song ends

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Song Finished");
    delay(2000); // Display message for 2 seconds

    // Display prompt to move again
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Move to Start");
    delay(2000); // Display message for 2 seconds
  }
}

// Function to connect to Wi-Fi
void connectToWiFi() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Connecting WiFi");

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WiFi Connected");
  delay(1000); // Delay for a short period to indicate connection success
}

// Function to fetch song data from the server
void fetchSongData() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin("https://mypiono.sysoftgroups.com/song.php");  // Replace with your server URL
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println(httpResponseCode);
      Serial.println(response);

      // Parse the JSON response
      StaticJsonDocument<1024> doc;  // Increased buffer size to accommodate larger JSON
      DeserializationError error = deserializeJson(doc, response);

      if (!error) {
        songName = doc["song_name"].as<String>();
        mode = doc["mode"].as<String>();

        JsonArray notes = doc["notes"];
        JsonArray durations = doc["durations"];

        numNotes = notes.size();  // Get the number of notes dynamically

        // Clear the vectors to avoid any previous data
        noteToLED.clear();
        noteDurations.clear();

        // Copy the notes and durations into the vectors
        for (int i = 0; i < numNotes; i++) {
          noteToLED.push_back(notes[i]);
          noteDurations.push_back(durations[i]);
        }

        Serial.println("Song Name: " + songName);
        Serial.println("Mode: " + mode);
        Serial.print("Number of Notes: ");
        Serial.println(numNotes);

      } else {
        Serial.println("Error parsing JSON");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Error fetching");
        lcd.setCursor(0, 1);
        lcd.print("data from server");
      }
    } else {
      Serial.println("Error in HTTP request");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("HTTP Request Err");
    }
    http.end();
  } else {
    Serial.println("WiFi Disconnected");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("WiFi Disconnected");
  }
}

// Function to send performance data to the server
void sendPerformanceToServer(String songName, String mode, float score) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);  // Replace with your server URL
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    // Prepare the data to send
    String postData = "song_name=" + songName + "&mode=" + mode + "&score=" + String(score);

    // Send HTTP POST request
    int httpResponseCode = http.POST(postData);

    // Check the response code
    if (httpResponseCode > 0) {
      String response = http.getString();  // Get the response to check if it's successful
      Serial.println(httpResponseCode);
      Serial.println(response);
    } else {
      Serial.print("Error on sending POST: ");
      Serial.println(httpResponseCode);
    }
    http.end();  // Close connection
  } else {
    Serial.println("WiFi Disconnected");
  }
}

// Function to print performance and send it to the server
void printPerformanceOverview() {
  float scorePercentage = (float(correctPresses) / float(totalPresses)) * 100.0;
  
  // Print the performance overview
  Serial.println("Performance Overview:");
  Serial.println("---------------------");
  Serial.print("Song: ");
  Serial.println(songName);
  Serial.print("Mode: ");
  Serial.println(mode);
  Serial.print("Score: ");
  Serial.print(correctPresses);
  Serial.print("/");
  Serial.print(totalPresses);
  Serial.print(" (");
  Serial.print(scorePercentage);
  Serial.println("%)");

  // Send performance to server
  sendPerformanceToServer(songName, mode, scorePercentage);
}

// Function to play the song in Tutorial Mode
void playTutorialMode() {
  correctPresses = 0;   // Reset score
  totalPresses = numNotes; // Total notes is total presses

  for (int i = 0; i < numNotes; i++) {
    int ledIndex = noteToLED[i];
    int duration = noteDurations[i];

    // Light up the current LED
    strip.setPixelColor(ledIndex, strip.Color(255, 0, 0)); // Set LED to red
    strip.show();

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Press Btn ");
    lcd.print(ledIndex + 1); // Show which button to press
    lcd.setCursor(0, 1);
    lcd.print("for Note ");
    lcd.print(i + 1);

    // Wait until the corresponding button is pressed
    bool correctButtonPressed = false;

    while (!correctButtonPressed) {
      if (digitalRead(buttonPins[ledIndex]) == HIGH) {
        correctButtonPressed = true;
        correctPresses++;  // Increment score
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Correct!");
        delay(1000); // Display message for 1 second
      }
      delay(100); // Small delay to prevent rapid loop execution
    }

    // Turn off the LED after button press
    strip.setPixelColor(ledIndex, strip.Color(0, 0, 0)); // Turn off LED
    strip.show();

    // Add a short delay before the next note
    delay(200); // Adjust delay as needed
  }
}

// Function to play the song in Play Mode (automatic play)
void playPlayMode() {
  correctPresses = 0;   // Reset score
  totalPresses = numNotes; // Total notes is total presses

  for (int i = 0; i < numNotes; i++) {
    int ledIndex = noteToLED[i];
    int duration = noteDurations[i];

    // Light up the current LED
    strip.setPixelColor(ledIndex, strip.Color(0, 255, 0)); // Set LED to green for Play Mode
    strip.show();

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Playing Note ");
    lcd.print(i + 1);

    bool correctButtonPressed = false;
    unsigned long startTime = millis();

    // Wait for user input during the note duration
    while (millis() - startTime < duration) {
      if (digitalRead(buttonPins[ledIndex]) == HIGH) {
        correctButtonPressed = true;
        correctPresses++;  // Increment score for correct timing
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Correct!");
        break;
      }
    }

    // Turn off the LED after the note duration
    strip.setPixelColor(ledIndex, strip.Color(0, 0, 0)); // Turn off LED
    strip.show();

    delay(200); // Add a short delay before the next note
  }
}
